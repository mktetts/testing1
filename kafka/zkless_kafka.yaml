kind: Deployment
apiVersion: apps/v1
metadata:
  name: zkless-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zkless-kafka
  template:
    metadata:
      labels:
        app: zkless-kafka
    spec:
      containers:
      - resources:
          limits:
          cpu: 250m
          memory: 512Mi
        terminationMessagePath: /dev/termination-log
        name: zkless-kafka
        command:
        - /bin/sh
        - '-c'
        - >-
          export CLUSTER_ID=$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh format -t $CLUSTER_ID -c config/kraft/server.properties && bin/kafka-server-start.sh config/kraft/server.properties --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}
        env:
        - name: LOG_DIR
          value: /tmp/logs
        - name: KAFKA_ADVERTISED_LISTENERS
          value: 'PLAINTEXT://zkless-kafka-bootstrap:9092'
        ports:
        - containerPort: 9092
          protocol: TCP
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: File
        image: 'registry.redhat.io/amq-streams/kafka-35-rhel8:2.5.0'
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: v1
kind: Service
metadata:
  name: zkless-kafka-bootstrap
spec:
  type: LoadBalancer
  ports:
  - port: 9092
    protocol: TCP
    targetPort: 9092
  selector:
    app: zkless-kafka